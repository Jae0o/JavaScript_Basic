'use strict';

/* Scope 스코프 */
// 변수를 참조할 수 있는 유효한 영역,범위 or 식별자 ( 변수, 함수, 클래스 )가 유효한 범위

// 블럭 안의 변수는 "블럭 안"에서만 작용한다.
// 하지만 내부에서는 외부의 즉 부모와 자식관계의 블럭에서 자식은 부모의 변수를 가져올 수 있다.

const a = "a";
{ const b = "b" };

console.log(a);
// 블럭 박의 변수 a 는 출력이 가능하지만
try {
    console.log(b);
    // 블럭 내부의 변수 b는 외부에서 부를수 없다.
} catch (error) {

    console.log("Error! 블럭 안의 변수는 \"블럭 안\" 안에서만 작용한다.");
};


/* ------------------------------------------------------------------------ */

// 블럭 안의 블럭

{
    const A = "A"
    {
        const B = "B"
        console.log(A); /* Value = A */
        // 외부의 결과는 블럭안에서 불러올수 있다. ( 전역 변수 )
    }
    console.log(A); /* Value = A */

    try {
        console.log(B);
        // 똑같이 블럭 내부의 블럭이여도 결국 블럭이기에 불러올수 없음
    } catch (error) {

        console.log("Error! 블럭 중첩 안의 변수는 \"해당 블럭 안\" 안에서만 작용한다.");
    };
}

/* ------------------------------------------------------------------------ */

/* 근접한 블럭 */
const A = "Global Scope"
// JS 내에서의 정해진 변수 잔역 변수
{
    const A = "Global Scope"
    // 블럭이라는 한정된 지역에 존재하는 변수 지역변수
    {
        const A = "inside Block"
        {
            console.log(A); /* Value = inside block */
            // 기본적으로 가장 근접한 변수를 호출한다.
        }
    }
};