/* 정규식 표현 */
// 문자열에서 찾고자 하는 특정 내용을 찾거나 그값을 반환하고자 할때 사용함.

// ( / 정규표현식 / 플래그 ) ; = 가장 기본적인 형태
let 정규식이름 = /정규표현식/migusy; /* + 플래그 */


/* ---------------------------------------------------------------------------------------------------------------------------------- */


/* 정규식의 메소드 method */

/* .match */
// ( "문자열" ) .macth ( / 정규식 / 플래그 ) ;
console.log(".match : " + ("abcbdbeb").match(/b/g)); /* 앞 텍스트를 없앨시 배열로 표현 */
// 문자열에서 에서 정규식에 해당하는 항목을 찾아 배열로 표현함

/* .replace */
// ( "문자열" ) .macth ( / 정규식 / 플래그 , " 대체 내용 " ) ;
console.log(".replace : " + ("abcde").replace(/b/, " test ")); /* 결과 = [ 'a test cde' ] */
// 문자열에서 정규식과 같은 항목을 찾아 대체 내용으로 변환하여 표시

/* .split */
// ( "문자열" ) .split ( / 정규식 / 플래그 ) ;
console.log(".split : " + ("abcbacabcba").split(/c/)); /* 결과 = [ 'ab','ba','ab','ba' ] */
// 문자열에서 정규식에 해당하는 항목을 찾아 찾은 항목을 기준으로 쪼개어 배열로 반환

/* .test */
// ( / 정규식 / 플래그 ) .test ( " 문자열 " ) ;
console.log(".test : " + (/a/).test("abcd")); /* 결과 = true */
// 문자열에서 정규식을 찾아 같은 항목이 있다면 true 없다면 false를 반환함

/* exec */
// ( / 정규식 / 플래그 ) .test ( " 문자열 " ) ;
console.log(".exec : " + (/a/g).exec("abcdaaaa")); /* 결과 = [ 'a' ] */
// .match와 유사하지만 다른점은 동일한 항목이 많아도 처음 발견한 항목 하나만을 반환함.


/* ---------------------------------------------------------------------------------------------------------------------------------- */


/* 정규식의 플래그 flags */
// 플래그는 기본적으로 서로 중첩하여 사용가능하다

/* i */
// 대소문자를 구분하지 않고 사용가능하게 해줌
console.log("not use i : " + ("abcd").match(/A/)); /* 결과 = null */
console.log("use i : " + ("abcd").match(/A/i)); /* 결과 = ['a'] */

/* g */
// global의 약자로 검색 내용중 중복내용 모두를 반환함
console.log("not use g : " + ("aabacaaada").match(/a/)); /* 결과 = ['a'] */
console.log("use g : " + ("aabacaaada").match(/a/g)); /* 결과 =  ['a', 'a', 'a','a', 'a', 'a','a'], */

/* m */
// 문자열의 행이 바껴도 검색을 이어간다
let test_word = "first word\nsecond start test\nthird word test";
console.log("not use m : " + (test_word).match(/^second/)); /* 결과 = null */
console.log("use m : " + (test_word).match(/^second/m)); /* 결과 = [ 'second' ] */

/* s and y and u */
// s = . 이 개행문자까지 포함하여 검색함
// y = 문자내의 특정 위치에서 검색을 진행하는 sticky 모드를 활성화함
// u = 유니코드 전체를 지원하게 함


/* ---------------------------------------------------------------------------------------------------------------------------------- */


/* 특정 문자 와 기호의 표현 */
// - 가 붙은 문자는 모두 -로 범위 조절 가능

// a-z A-Z  =  영어
// 0-9      =  숫자
// ㄱ-ㅎ 가-힣  =  한글
// .        =  모든 문자열 but 줄바꿈에 적용되지 않음
// \d       =  숫자
// \D       =  숫자가 아닌것
// \w       =  밑줄을 포함한 모든 영어+숫자 [a-zA-Z0-9] 와 동일함
// \W       =  \w 가 아닌것
// \s       =  스페이스 공벽
// \S       =  스페이스 공백이 아닌것
// \b       =  영어 대소문자 52개 + 숫자 10개 + _(underscore) 를 포함한 63개의 문자가 아닌것
// \B       =  \b 에서 말한 63개의 문자
// /특수기호    = \. \, \? \/ \! \@ 등 특수기호
// \n       =  줄바꿈

// 잘 안쓰일것같은것들
// \x 16진수문자    \O 8진수문자    \u 유니코드문자     \c 제어문자
// \f 폼 피드 문자  \r 캐리지 리턴 문자     \t 탭 문자


/* ---------------------------------------------------------------------------------------------------------------------------------- */


/* 검색 기준 */


/* / abc / */
// 안의 텍스트 그대로를 찾아냄
console.log(("abcdefgh").match(/cde/g)); /* 결과 = [ 'cde' ] */


/* / a | b / */
//  또는 or
console.log(("abcdefgh").match(/a|f/g)); /* 결과 = [ 'a', 'f' ] */

/* / [ abcde ] / */
// 괄호안의 여러 문자들 중 찾아냄
console.log(("abcdefgh").match(/[bef]/g)); /* 결과 = [ 'b', 'e', 'f' ] */

/* / [ ^acd ] */
// 괄호안 ^뒤에 있는 문자들을 모두 제외하고 찾아냄
console.log(("abcdefgh").match(/[^bdeg]/g)); /* 결과 = [ 'a', 'c', 'f', 'h' ] */

/* / ^a / */
// ^뒤의 특정 문자열로 시작
console.log(("abcdefgh").match(/^c/g)); /* 결과 = null */

/* / a$ / */
//  $앞의 특정 문자열로 끝나는 문자를 찾아냄
console.log(("abcdefgh").match(/h$/g)); /* 결과 = [ 'h' ] */


/* ---------------------------------------------------------------------------------------------------------------------------------- */


/* 그룹화 or 패턴 */

/* ( ) */
// 그룹화 및 캡처 기능
// 적용전
console.log("not use ( ) : " + ("xoxoxoxo").match(/xo+/)); /* 결과 = [ 'xo' ] */
console.log("not use ( ) : " + ("xooooo").match(/xo+/)); /* 결과 = [ 'xooooo' ] */
// 적용후
console.log("use ( ) : " + ("xoxoxoxo").match(/(xo)+/)); /* 결과 = [ 'xoxoxoxo','xo' ] */
console.log("use ( ) : " + ("xooooo").match(/(xo)+/)); /* 결과 = [ 'xo','xo' ] */
// 적용전에는 xo에서 o 하나에만 + 가 적용되지만 그룹화를 하면 xo자체에 + 가 진행된다.

/* 캡처란? */
// 기존의 패턴과 플래그에 맞게 한번 검색을 진행하고 캡처된 내용을 한번더 추가로 검색
/* 적용전 */
console.log("use ( ) : " + ("xoxoxo").match(/(xo)+/)); /* 결과 = [ 'xoxoxo','xo' ] */
// 결과에서의 2개의 결과중 앞의 xoxoxo는 + 플래그가 정상적으로 적용되어 한개 혹은 그이상의 값을 검색을 진행되었고
// 2번째 xo는 캡처된 괄호안의 xo만 검색

/* ( ?: ) */
// 기존의 ( ) 와 달리 그룹화만 진행되고 캡처는 적용되지 않는다
console.log("not use (?:) : " + ("xoxoxo").match(/(xo)+/)); /* 결과 = [ 'xoxoxo','xo' ] */
console.log("use (?:) : " + ("xoxoxo").match(/(?:xo)+/)); /* 결과 = [ 'xoxoxo' ] */


/* ---------------------------------------------------------------------------------------------------------------------------------- */


/* !!!!이용시 주의!!!! */

/* 1 */
// ^[패턴] 과 [^패턴]
console.log("not use ^[] : " + ("1234abcd").match(/^[0-9]/g)); /* 결과 = [ '1' ] */
console.log("use [^] : " + ("1234abcd").match(/[^0-9]/g)); /* 결과 = [ 'a','b','c','d' ] */

/* 2 */
// .(점) 의 의미 조심 1. 모든 텍스트를 뜻하고 자릿수를 표현 or 2. \. 은 특수기호 .을 표현
// .은 모든 문자열을 뜻함
console.log(("12.ab.AB.34").match(/./g)); /* 결과 = [ '1','2','.','a','b','.','A','B','.','3','4' ] */
// ...여러개 사용시 갯수에 맞게 텍스트를 나누거나 갯수 에 맞춰 검색 *마지막 34는 갯수가 부족해 검색 실패!
console.log(("12.ab.AB.34").match(/.../g)); /* 결과 = [ '12.','ab.','AB.' ] */
// 패턴들 사이에 넣었을때
console.log(("12.ab.AB.34").match(/2..b/g)); /* 결과 = [ '2.ab' ] */
console.log(("12.ab.AB.34").match(/2.....b/g)); /* 결과 = null */
console.log(("12.ab.AB.34").match(/2.b/g)); /* 결과 = null */
